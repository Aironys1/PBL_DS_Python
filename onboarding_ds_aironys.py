# -*- coding: utf-8 -*-
"""Onboarding DS Aironys.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GoJ8KLXaakp_QY5-t4TNwPdZrVVJPHvv

# Exibindo a Data atual e um mês depois
"""

import pandas as pd
import datetime

data_atual = datetime.datetime.now()
um_mes_depois = data_atual + datetime.timedelta(days=30)

print(f"Data atual: {data_atual}")
print(f"Data um mês depois: {um_mes_depois}")

"""# Dados do Analista"""

analista ={
    'Nome': 'Aironys', 
    'Sobrenome': 'Garrido de Macedo' ,
    'Apelido': 'AYRON',
    'Data_Nacimento': '05/12/1990',
    'Empresa_Nacimento': 'Raccoon',
    'Cargo': 'Junior Technology Analyst',
}


print(analista)
analista
# Selecionando nome especifico
analista['Nome'],analista['Apelido']
display(analista)

"""#### Criando um dataframe a partir de um dicionário
#### dataframe = pd.DataFrame()
"""

analista ={
    'Nome': ['Aironys', 'Alice', 'Lívia','Samuel', 'Jéssica', 'Isabela'],
    'Apelido':['Aironn', 'Lice', 'Livi','Muka', 'Jéssi', 'Isa'],
    'Sexo': ['M','F','F','M','F','F'],
    'Data_Nacimento': ['05/12/1990', '08/11/1998', '15/10/1991','22/07/1993', '23/02/1999', '17/01/2000'],
    'Empresa': ['Raccoon','Algar','Vivo','PicPay','Americanas','Drogazil'],
    'Cargo': ['Junior Analyst','Technology Analyst','Analyst Senior','Analyst Senior','Analyst Pleno','Analyst Junior'],
    'Salario':[4415,3200,2500, 2800,3600,4800],
    'Ativo': [True, True, False, True, True, True]
    

}


df_analista = pd.DataFrame(analista)
display(df_analista)

# Visualizando a quantidade de linhas e colunas 
print(df_analista.shape)

# Informação geral, de média, contagem, desvio padrão...
display(df_analista.describe())

# pegando linhas
print("Pegando uma linha \n\n")
display(df_analista.loc[[1]]) # Pegando uma linha

"""#### Selecionando os 3 primeiros da tabela"""

display(df_analista.head(3))

# Usanso a saída (print)
print(df_analista)

"""#### Filtrando todas as Mulheres na tabela"""

Mulheres = display(df_analista.loc[df_analista['Sexo'] == 'F'])

"""#### Filtrando todas os Homens na tabela"""

Homens = display(df_analista.loc[df_analista['Sexo'] == 'M'])

"""# Documentação

As listas em Python são mutáveis, o que significa ser possível modificá-las adicionando, removendo ou modificando seus elementos através dos índices. Como viram, as listas possuem a capacidade de armazenar diferentes tipos de objetos, como por exemplos:

* Números inteiros: int
* Números de ponto flutuante: float
* Números complexos: complex
* Booleanos: bool (True ou False)
* Strings: str
* Listas: list
* Tuplas: tuple
* Dicionários: dict
* Conjuntos: set
Objetos personalizados e outras estruturas de dados definidas pelo usuário.

O comando `list()` é usado para converter um objeto iterável (como uma tupla, conjunto, dicionário, ou mesmo uma string) em uma lista.
<br><br><br>

## Atividade
Gostaria que vocês pesquisassem e produzissem o seguinte: <br><br>
Um notebook no colab com título [Onboarding][DS] - Exercício de Manipulação - Seu Nome<br>
1. Quais outros tipos de dados e objetos que existem em python que eu não citei ali no treinamento? Exemplos: Array, Matrizes,<br> ... Deem uma pesquisada aí e escrevam no arquivos alguns exemplos dessas estruturas.
2. Depois que agregamos por Data (Dia) aquela tabela do Kaggle, queria que vocês encontrassem um jeito de produzir a mesma tabela só que dessa vez agregada por Mês.<br>
3. No groupby utlizei apenas uma dimensão para agregação. Agora eu queria que vocês agregassem por Data (Dia) e por Produto, que é o Description naquela tabela.<br><br>

Em Python, existem vários tipos de dados e objetos que podem ser usados em um programa.<br> 
Alguns dos tipos de dados mais comuns em Python incluem:

Números: inteiros (int), números de ponto flutuante (float) e números complexos (complex).<br>
Sequências: listas (list), tuplas (tuple) e strings (str).<br>
Conjuntos: set e frozenset.<br>
Dicionários: dict.<br>
Além desses tipos de dados, Python também suporta vários objetos que podem ser usados em um programa. Alguns exemplos incluem:<br>

Funções: são objetos que permitem que você execute um conjunto específico de instruções quando chamados.<br>
Classes: são objetos que permitem que você defina um conjunto de atributos e métodos para criar objetos personalizados.<br>
Módulos: são objetos que permitem que você compartilhe código entre diferentes arquivos de um programa.<br>
Exceções: são objetos que permitem que você lide com erros e exceções em um programa.<br>
A linguagem Python é conhecida por ser altamente orientada a objetos, o que significa que a maioria das coisas em Python são objetos.<br>
A compreensão de como esses objetos e tipos de dados funcionam é fundamental para escrever programas eficazes em Python.<br><br>

## Arrays
Existem diferentes tipos de dados de arrays que podem ser criados usando o módulo array. <br>
Alguns dos tipos de dados de arrays mais comuns são:<br><br>

'b': array de inteiros assinados de 1 byte (8 bits)<br>
'B': array de inteiros não assinados de 1 byte (8 bits)<br>
'h': array de inteiros assinados de 2 bytes (16 bits)<br>
'H': array de inteiros não assinados de 2 bytes (16 bits)<br>
'i': array de inteiros assinados de 4 bytes (32 bits)<br>
'I': array de inteiros não assinados de 4 bytes (32 bits)<br>
'l': array de inteiros assinados de 4 bytes em plataformas de 32 bits e de 8 bytes em plataformas de 64 bits<br>
'L': array de inteiros não assinados de 4 bytes em plataformas de 32 bits e de 8 bytes em plataformas de 64 bits<br>
'f': array de números de ponto flutuante de 4 bytes<br>
'd': array de números de ponto flutuante de 8 bytes<br>
Os tipos de dados de arrays são especificados como uma string de um caractere que representa o tipo de dados que será armazenado no array.<br><br>

# Objetos em Python

Em Python, tudo é um objeto. 
Isso significa que tudo que você cria em Python, incluindo números, strings, funções, classes, módulos <br>e até mesmo o próprio Python, é um objeto. <br>
Um objeto em Python é uma instância de uma classe e tem atributos (variáveis) e métodos (funções) associados a ele.<br>

Aqui está um exemplo simples de como criar e usar um objeto em Python:<br><br>
"""

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def apresentar(self):
        print("Oi, meu nome é", self.nome, "e eu tenho", self.idade, "anos.")

# Cria uma instância da classe Pessoa
pessoa1 = Pessoa("Aironys Garrido", 32)

# Chama o método apresentar() do objeto pessoa1
pessoa1.apresentar()  # Oi, meu nome é Aironys Garrido e eu tenho 32 anos.

def nome_da_funcao(parametros):
    # Corpo da função
    # Código que realiza a tarefa da função
    # Pode conter um ou mais comandos return
    return valor_de_retorno

"""# Exemplo de Arrays
Aqui está um exemplo de criação e manipulação de um array de números inteiros usando o módulo array:
"""

import array

# Criando um array de inteiros com os valores 10,50,25,15,100
arr = array.array('i', [10,50,25,15,100, 2, 8, 22, 7, 4])
print(arr)

# Acessa o primeiro elemento do array
print(arr[0])

# Modifica um elemento específico do array
arr[3] = 200
print(arr[3])

print(arr)

# Adiciona um elemento ao final do array
arr.append(350)
print(arr)

# Remove o segundo elemento do array
del arr[1]
print(arr)

# Imprime todos os elementos do array
for todos in arr:
    print(todos)

"""Neste exemplo, criamos um array de inteiros usando a string 'i' para representar o tipo de dados. Em seguida, acessamos e modificamos elementos específicos do array, adicionamos um elemento ao final, removemos um elemento e imprimimos todos os elementos do array usando um loop for.

# Trabalhando com Matrizes
Aqui estão alguns exemplos de como criar matrizes em Python usando diferentes abordagens:
"""

# Matriz vazia com dimensões especificadas:
import numpy as np

# Matriz 3x3 vazia
matriz_vazia = np.empty((3, 3))
display(matriz_vazia)

# Matriz com zeros preenchidos com dimensões especificadas:
import numpy as np

# Matriz 2x4 com zeros
matriz_zeros = np.zeros((2, 4))
display(matriz_zeros)

# Matriz com valores aleatórios com dimensões especificadas:
import numpy as np

# Matriz 4x2 com valores aleatórios
matriz_aleatoria = np.random.rand(4, 2)
display(matriz_aleatoria)

# Matriz a partir de uma lista de listas:
import numpy as np

# Matriz 3x3 a partir de uma lista de listas
lista = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matriz = np.array(lista)
display(matriz)

"""# Exercício Gráfico de Barras
Criando um gráfico de barras no pandas
usanso a função `plot()` com argumento `kind='bar'`
"""

import pandas as pd
import matplotlib.pyplot as plt

# Cria um DataFrame com dados de exemplo
dados = {'Ano': [2010, 2011, 2012, 2013, 2014],
         'Vendas': [100, 120, 90, 80, 110]
         }
df = pd.DataFrame(dados)

# Cria um gráfico de barras a partir dos dados do DataFrame
df.plot(x='Ano', y='Vendas', title="Gráficos de Barras", kind='bar')

# Mostra o gráfico
plt.show()

"""# Meu PBL Aironys Garrido

Importando uma tabela (data.csv) e exibindo com o comando display
"""

dados = pd.read_csv('/content/drive/MyDrive/Onboarding DS Aironys/data.csv',encoding='latin-1')
display(dados)

dados.info()

# Criando uma coluna só de data
dados['Date'] = pd.to_datetime(dados['InvoiceDate'],utc=True).dt.date

dados['CustomerID'] = dados['CustomerID'].astype('str')
print(dados)

# Dados formatados
dados['Date']

display(dados.describe())

display(dados)

"""### Criando uma colona receita, calculamos (UnitPrice) * (Quantity)"""

dados['Receita'] = dados['UnitPrice'] * dados['Quantity']
display(dados)

dados.info()

"""## Criando dados agrupados por mês
###### 2. Depois que agregamos por Data (Dia) aquela tabela do Kaggle, queria que vocês encontrassem 
###### um jeito de produzir a mesma tabela só que dessa vez agregada por Mês.
"""

#dados_agrupados = dados.groupby('Date').agg({"Receita": "sum", "Quantity": "sum"})
#display(dados_agrupados)

# Criando uma coluna só de mes
dados['Mes'] = pd.to_datetime(dados['InvoiceDate'],utc=True).dt.month

# Agregando Quantidade e Receita peplo Mês
dados_agrupados = dados.groupby('Mes').agg({"Quantity":"sum", "Receita": "sum"})

display(dados_agrupados)

dados_agrupados['Mes']=dados_agrupados.index

dados_agrupados.info()

"""## Visualização dos dados"""

import matplotlib.pyplot as plt


# Para visualização e Exploração, utilizamos a bibilioteca Matplotlib
# Para produzir um gráfico simples da agregação acima, utilizamos


# Visualização dos dados agregados por Mês
ax = dados_agrupados.plot(x='Mes', y='Receita', title="Série Temporal")
ax = dados_agrupados.plot(x='Mes', y='Receita', title="Série Temporal", kind='bar')



plt.show()

display(dados)

"""##3-  Agora eu queria que vocês agregassem por Data (Dia) e por Produto, que é o Description naquela tabela."""

# Dados de prosutos agrupados por dia
dados_agrupados_produtos = dados.groupby("Date").agg({"Description": "sum", "Quantity": "sum"})

# Visualizando os a quantidade de produtos
display(dados_agrupados_produtos)

dados_agrupados_produtos.info()

"""O describe()método retorna a descrição dos dados no DataFrame.

Se o DataFrame contiver dados numéricos, a descrição conterá essas informações para cada coluna:

contagem - O número de valores não vazios.
média - O valor médio (média).
std - O desvio padrão.
min - o valor mínimo.
25% - O percentil de 25%*.
50% - O percentil de 50%*.
75% - O percentil 75%*.
máx - o valor máximo.
"""

display(dados_agrupados_produtos.describe())

dados_agrupados_produtos['Date']=dados_agrupados_produtos.index

"""### Visualização da quantidade de produtos por data"""

ax = dados_agrupados_produtos.plot(x= 'Date', y='Quantity', title="Série Temporal")


plt.show()